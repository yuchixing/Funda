import os
import notion_client
import logging

logger = logging.getLogger(__name__)

def create_notion_page(api_key: str, database_id: str, title: str, summary_text: str, article_url: str):
    """
    Creates a new page in a Notion database with the given article details.

    Args:
        api_key: The Notion API key.
        database_id: The ID of the Notion database.
        title: The title of the article.
        summary_text: The summarized text of the article.
        article_url: The URL of the original article.

    Returns:
        The API response from Notion if successful, otherwise None.
    """
    # Check if the API key or Database ID is None or an empty string
    if not api_key:
        logger.warning("Notion: Skipped page creation (API key is missing or empty).")
        return None
    if not database_id:
        logger.warning("Notion: Skipped page creation (Database ID is missing or empty).")
        return None

    logger.info(f"Attempting to create Notion page for article: \"{title}\" (URL: {article_url})")
    try:
        notion = notion_client.Client(auth=api_key)
        
        max_summary_length = 2000 # Notion's limit for rich text content is 2000 characters per block
        truncated_summary = summary_text
        if len(summary_text) > max_summary_length:
            truncated_summary = summary_text[:max_summary_length-3] + "..."
            logger.warning(f"Notion: Summary for \"{title}\" was truncated from {len(summary_text)} to {len(truncated_summary)} characters.")

        properties = {
            "Title": {"title": [{"text": {"content": title}}]},
            "Summary": {"rich_text": [{"text": {"content": truncated_summary}}]},
            "URL": {"url": article_url}
        }

        response = notion.pages.create(
            parent={"database_id": database_id},
            properties=properties
        )
        logger.info(f"Notion: Successfully created page for \"{title}\". Page ID: {response.get('id')}")
        return response
    except notion_client.APIResponseError as e:
        error_message = e.body.get('message', e.code) if hasattr(e, 'body') and isinstance(e.body, dict) else e.code
        logger.error(f"Notion: Failed to create page for \"{title}\". API Error: {error_message}", exc_info=True)
        return None
    except Exception as e:
        logger.error(f"Notion: An unexpected error occurred while creating page for \"{title}\". Error: {e}", exc_info=True)
        return None

if __name__ == '__main__':
    # For direct testing of this module
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', handlers=[logging.StreamHandler()])

    logger.info("--- Testing notion_writer.py directly ---")
    
    test_api_key_env = os.getenv("NOTION_API_KEY_TEST") 
    test_db_id_env = os.getenv("NOTION_DATABASE_ID_TEST")

    if not test_api_key_env or not test_db_id_env:
        logger.info("Skipping actual Notion API call for direct test: NOTION_API_KEY_TEST or NOTION_DATABASE_ID_TEST is not set or is empty.")
        
        logger.info("Testing None/empty checks for Notion credentials:")
        create_notion_page(None, "DB_ID_PLACEHOLDER", "Test Title Missing Key", "Test Summary", "http://example.com/missingkey")
        create_notion_page("", "DB_ID_PLACEHOLDER", "Test Title Empty Key", "Test Summary", "http://example.com/emptykey")
        create_notion_page("VALID_KEY_FOR_TEST", None, "Test Title Missing DB ID", "Test Summary", "http://example.com/missingdbid")
        create_notion_page("VALID_KEY_FOR_TEST", "", "Test Title Empty DB ID", "Test Summary", "http://example.com/emptydbid")
    else:
        logger.info(f"Attempting to create a real test page in Notion database: {test_db_id_env} (using NOTION_API_KEY_TEST).")
        page_response_test = create_notion_page(
            api_key=test_api_key_env,
            database_id=test_db_id_env,
            title="Test Article from Script (notion_writer.py)",
            summary_text="This is a summary of the test article generated by the script's direct test block.",
            article_url="http://example.com/test-article-direct"
        )
        if page_response_test:
            logger.info(f"Page creation successful during direct test. Response ID: {page_response_test.get('id')}")
        else:
            logger.info("Page creation failed or was skipped during direct test.")
    
    logger.info("\n--- Testing with a very long summary (local truncation check) ---")
    long_summary_test = "This is a very long summary designed to test the truncation logic. " * 100 # Approx 7000 chars
    # We call the function with potentially None/empty keys to check the updated logic.
    create_notion_page(
        test_api_key_env, 
        test_db_id_env,   
        "Long Summary Test (notion_writer.py)",
        long_summary_test,
        "http://example.com/long-summary-test-direct"
    )
    # If keys are missing/empty, it will log warnings and skip the API call.
    # If keys are present, and it's a long summary, it will log truncation.
    
    logger.info("--- notion_writer.py direct test finished ---")
